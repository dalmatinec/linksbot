import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import FSInputFile
import time

from config import TOKEN, CHAT_ID

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –Ω–µ –≤—ã–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
active_links = {}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
async def create_invite_link():
    chat = await bot.get_chat(CHAT_ID)
    invite_link = await chat.create_invite_link(expire_date=int(time.time()) + 900, member_limit=2)
    return invite_link.invite_link

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
def get_inline_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞—à —á–∞—Ç", callback_data="get_chat_link")],
        [InlineKeyboardButton(text="‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å –ë–æ—Ç", url="https://t.me/FastShopkz_bot")]
    ])
    return keyboard

# –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –õ–°)
def get_reply_keyboard():
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="üè¥‚Äç‚ò†Ô∏è –ù–∞—à–∏ —Å—Å—ã–ª–∫–∏")
    keyboard.adjust(1)
    return keyboard.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    text = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüîç –í –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –ø–æ –ø–æ–∏—Å–∫—É –æ—Ä–≥–∞–Ω–∏–∫–∏.\n‚è≥ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ 2 –ª—é–¥—è–º.\nüì© –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É!"

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        photo = FSInputFile("welcome.jpg")
        await message.answer_photo(photo=photo, caption=text, reply_markup=get_inline_keyboard() if message.chat.type == "private" else None)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(text, reply_markup=get_inline_keyboard() if message.chat.type == "private" else None)
        print("WARNING: welcome.jpg file not found. Please add this file to the project.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à–∏ —Å—Å—ã–ª–∫–∏" (—Ç–æ–ª—å–∫–æ –≤ –õ–°)
@dp.message()
async def handle_links_button(message: types.Message):
    if message.chat.type != "private":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ

    if message.text == "üè¥‚Äç‚ò†Ô∏è –ù–∞—à–∏ —Å—Å—ã–ª–∫–∏":
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É
        if user_id in active_links and active_links[user_id] > time.time():
            remaining_time = active_links[user_id] - time.time()
            await message.answer(f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞! –í—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {int(remaining_time)} —Å–µ–∫—É–Ω–¥.", reply_markup=get_reply_keyboard())
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
        invite_link = await create_invite_link()
        active_links[user_id] = time.time() + 900  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏

        await message.answer(f"üëâ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {invite_link}", reply_markup=get_reply_keyboard())
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.", reply_markup=get_reply_keyboard() if message.chat.type == "private" else None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/links" –∏–ª–∏ "—Å—Å—ã–ª–∫–∞" –≤ –≥—Ä—É–ø–ø–µ
@dp.message(lambda message: message.chat.type != "private" and message.text.lower() in ["—Å—Å—ã–ª–∫–∞", "/links"])
async def send_chat_link(message: types.Message):
    invite_link = await create_invite_link()
    await message.answer(f"üí¨ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {invite_link}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ù–∞—à —á–∞—Ç"
@dp.callback_query(lambda c: c.data == "get_chat_link")
async def send_chat_link(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É
    if user_id in active_links and active_links[user_id] > time.time():
        remaining_time = active_links[user_id] - time.time()
        await callback.message.answer(f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞! –í—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {int(remaining_time)} —Å–µ–∫—É–Ω–¥.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
    invite_link = await create_invite_link()
    active_links[user_id] = time.time() + 900

    await callback.message.answer(f"üëâ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {invite_link}")
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("Bot started! Press Ctrl+C to stop")

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
