import asyncio
import time
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
import os

from config import TOKEN, CHAT_ID

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏
active_links = {}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
async def create_invite_link():
    invite_link = await bot.create_chat_invite_link(chat_id=CHAT_ID, expire_date=int(time.time()) + 900, member_limit=2)
    return invite_link.invite_link

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
def get_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞—à —á–∞—Ç", callback_data="get_chat_link")],
        [InlineKeyboardButton(text="‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å –ë–æ—Ç", url="https://t.me/FastShopkz_bot")]
    ])

# –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_reply_keyboard():
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="üè¥‚Äç‚ò†Ô∏è –ù–∞—à–∏ —Å—Å—ã–ª–∫–∏")
    return keyboard.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    text = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüîç –ù–∞ —Å–≤—è–∑–∏ –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –ø–æ –ø–æ–∏—Å–∫—É –æ—Ä–≥–∞–Ω–∏–∫–∏.\n‚è≥ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ 2 –ª—é–¥—è–º.\nüì© –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É!"

    if os.path.exists("welcome.jpg"):
        photo = FSInputFile("welcome.jpg")
        await message.answer_photo(photo=photo, caption=text, reply_markup=get_inline_keyboard())
    else:
        await message.answer(text, reply_markup=get_inline_keyboard())
        print("WARNING: welcome.jpg not found!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à–∏ —Å—Å—ã–ª–∫–∏"
@dp.message()
async def handle_links_button(message: types.Message):
    if message.text == "üè¥‚Äç‚ò†Ô∏è –ù–∞—à–∏ —Å—Å—ã–ª–∫–∏":
        user_id = message.from_user.id

        if user_id in active_links:
            remaining_time = int(active_links[user_id] - time.time())
            if remaining_time > 0:
                await message.answer(f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n‚è≥ –ù–æ–≤—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {remaining_time // 60} –º–∏–Ω {remaining_time % 60} —Å–µ–∫.", reply_markup=get_reply_keyboard())
                return

        invite_link = await create_invite_link()
        active_links[user_id] = time.time() + 900

        await message.answer(f"üëâ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {invite_link}", reply_markup=get_reply_keyboard())
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.", reply_markup=get_reply_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ù–∞—à —á–∞—Ç"
@dp.callback_query(lambda c: c.data == "get_chat_link")
async def send_chat_link(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if user_id in active_links:
        remaining_time = int(active_links[user_id] - time.time())
        if remaining_time > 0:
            await callback.message.answer(f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n‚è≥ –ù–æ–≤—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {remaining_time // 60} –º–∏–Ω {remaining_time % 60} —Å–µ–∫.")
            return

    invite_link = await create_invite_link()
    active_links[user_id] = time.time() + 900

    await callback.message.answer(f"üëâ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {invite_link}")
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("Bot started! Press Ctrl+C to stop")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
